name: Go CI and Release

on:
  push:
    branches:
      - master
env:
  APP_NAME: env-manager
  DIST_DIR: ./dist

jobs:
  # Create release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_URL: ${{ steps.create-release.outputs.upload_url }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    
    steps:
    - name: Get Version
      id: get_version
      run: |
        echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: Release v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: Save release url in env
      run: echo "RELEASE_URL=${{ steps.create-release.outputs.upload_url }}" >> $GITHUB_OUTPUT

    - name: Save release url in env
      run: echo "RELEASE_URL=${{ steps.create-release.outputs.upload_url }}" >> $GITHUB_ENV

  # Build and push to release
  build:
    needs: create-release
    strategy:
      matrix:
        os: ['windows', 'linux', 'darwin']
        arch: ['amd64', 'arm64']
        exclude:
          - os: windows
            arch: arm64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
        
    name: Build
    runs-on: ubuntu-latest
  
    steps:
    - name: Log Version and Release Url
      run: |
        echo Version: ${{ needs.create-release.outputs.VERSION }}
        echo Uploading to ${{ needs.create-release.outputs.RELEASE_URL }}
        echo OS: ${{ matrix.os }}
        echo ARCH: ${{ matrix.arch }}
        echo Artifact Name: env-manager-${{ matrix.os }}-${{ matrix.arch }}
        echo Saving in env...
        echo "RELEASE_URL=${{ needs.create-release.outputs.RELEASE_URL }}" >> $GITHUB_ENV
        echo "VERSION=${{ needs.create-release.outputs.VERSION }}" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=env-manager-${{ matrix.os }}-${{ matrix.arch }}" >> $GITHUB_ENV

    - name: Set up Git repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.21'  # Use the Go version of your choice

    - name: Build
      run: |
        mkdir -p ./dist && \
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o ./dist/${{ env.ARTIFACT_NAME }}

    - name: Upload Release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      with:
        upload_url: ${{ env.RELEASE_URL }}
        asset_path: ./dist/${{ env.ARTIFACT_NAME }}
        asset_name: ${{ env.ARTIFACT_NAME }}
        asset_content_type: application/gzip


  tag-branch:
    name: Tag
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Set up Git repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  
    - name: Get version
      id: get_version
      run: echo ::set-output name=VERSION::$(cat VERSION)
    # Tag the repository with the release version
    - name: Set up Git
      run: |
        git config --local user.name "vertefra"
        git config --local user.email "verte.fra@gmail.com"

    - name: Tag the repository
      run: git tag -a v${{ steps.get_version.outputs.VERSION }} -m "Release v${{ steps.get_version.outputs.VERSION }}"

    - name: Push tags
      run: git push origin --tags