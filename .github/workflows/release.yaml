name: Go CI and Release

on:
  push:
    branches:
      - master
env:
  APP_NAME: env-manager
  DIST_DIR: dist

jobs:
  # Test
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'  # Use the Go version of your choice
      
      - name: Lint Check
        run: go vet ./...

      - name: Run tests
        run: go test -v ./...

  # Create release
  create-release:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      RELEASE_URL: ${{ steps.create-release.outputs.upload_url }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Get Version
        id: get_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Verify latest release tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Check if new release is needed
        run: |
          if [ "$LATEST_TAG" = "v$VERSION" ]; then
            echo "No new release needed"
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
          else
            echo "SKIP_RELEASE=false" >> $GITHUB_ENV
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        
      - name: Create Release
        id: create-release
        if: env.SKIP_RELEASE != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false

  build:
    needs: create-release
    # Run only if a valid release url has been set
    if: ${{ needs.create-release.outputs.RELEASE_URL }} != ''
    strategy:
      matrix:
        os: ['windows', 'linux', 'darwin']
        arch: ['amd64', 'arm64']
        exclude:
          - os: windows
            arch: arm64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
        
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'  # Use the Go version of your choice

      - name: Create distribution directory
        run: mkdir -p ${{ env.DIST_DIR }}
        shell: bash
      
      - name: Build
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
        env:
          VERSION: ${{ needs.create-release.outputs.VERSION }}
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.RELEASE_URL }}
          asset_path: ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
          asset_name: ${{ env.APP_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
          asset_content_type: application/gzip
