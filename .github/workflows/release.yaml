name: test and release
on:
  push:
    branches:
      - master
env:
  APP_NAME: env-manager
  DIST_DIR: dist

jobs:
  # Test
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.3'
      
      - name: Lint Check
        run: go vet ./...

      - name: Run tests
        run: go test -v ./...

  # Create release and build binaries
  release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags
      
      - name: Get Version
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if release exists
        id: check_release
        run: |
          git fetch --tags
          if git rev-parse "v${{ steps.get_version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.get_version.outputs.VERSION }} already exists"
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Creating new release v${{ steps.get_version.outputs.VERSION }}"
          fi

      - name: Set up Go
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.3'

      - name: Build binaries
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        run: |
          mkdir -p ${{ env.DIST_DIR }}
          
          # Linux AMD64
          GOOS=linux GOARCH=amd64 go build -o ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-linux-amd64
          
          # Linux ARM64
          GOOS=linux GOARCH=arm64 go build -o ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-linux-arm64
          
          # macOS AMD64 (Intel)
          GOOS=darwin GOARCH=amd64 go build -o ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-darwin-amd64
          
          # macOS ARM64 (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -o ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-darwin-arm64
          
          # Windows AMD64
          GOOS=windows GOARCH=amd64 go build -o ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-windows-amd64.exe
      
      - name: Create Release
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-linux-amd64
            ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-linux-arm64
            ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-darwin-amd64
            ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-darwin-arm64
            ${{ env.DIST_DIR }}/${{ env.APP_NAME }}-windows-amd64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
